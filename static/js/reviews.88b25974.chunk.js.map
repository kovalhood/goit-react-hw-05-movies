{"version":3,"file":"static/js/reviews.88b25974.chunk.js","mappings":"kPACA,EAA0B,yBAA1B,EAAmE,+BAAnE,EAAgH,6BAAhH,EAAsJ,wBAAtJ,EAAuL,wBAAvL,EAAsN,sBAAtN,EAAmQ,sCAAnQ,EAAgU,sC,SCKjT,SAASA,IACpB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAEMC,EAAU,CACZC,KAAM,UACNC,MAAO,OACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,UACRC,OAAQ,WAkBZ,OAbAC,EAAAA,EAAAA,YAAU,YACNC,EAAAA,EAAAA,IAAkBb,GACbc,MAAK,SAAAC,GACFX,EAAWW,EAAKC,cAEzB,CAAChB,KAQG,8BACFG,EAAQc,OAAS,GACX,eAAIC,UAAWC,EAAf,SACGhB,EAAQiB,KAAI,gBATHC,EASMC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAASC,EAAxB,EAAwBA,eAAeC,EAAvC,EAAuCA,WAAvC,OACV,gBAAIR,UAAWC,EAAf,WACI,iBAAKD,UAAWC,EAAhB,UACKM,EAAeE,aACV,gBAAKC,KAbZP,EAa+BI,EAAeE,YAZ1DN,EAAOQ,SAAS,SACjBR,EAAOS,UAAU,GADhB,yCAEiCT,IAUuCU,IAAKR,EAAQL,UAAWC,KAC7E,gBAAKS,IAAI,+EAA+EG,IAAKR,EAAQL,UAAWC,KAEtH,4BACI,eAAID,UAAWC,EAAf,SAA0BI,KAC1B,cAAGL,UAAWC,EAAd,SAAuB,IAAIa,KAAKN,GAAYO,eAAe,QAAS5B,YAI5E,SAAC,IAAD,CACI6B,UAAW,IACXC,aAAc,mBACdC,aAAc,mBACdC,kBAAmBlB,EACnBmB,kBAAmBnB,EALvB,SAOKK,MAnB4BF,SAwB3C,wE,8KC9DRiB,EAAW,+BACXC,EAAU,4CAAhB,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,KAAAA,MAAf,gHAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SAC2BC,MAAMF,EAAKC,GADtC,YACUE,EADV,QAEoBC,GAFpB,iCAGgBD,EAASE,OAHzB,gDAIUC,QAAQC,OAAO,IAAIC,MAAM,cAJnC,2GAOO,SAASC,IAA+B,IAAXC,EAAU,uDAAL,IAC/BC,EAAc,uBAKpB,OAAOZ,EAAuB,GAAD,OAAIF,GAAJ,OAAec,GAAf,OAA6Bb,EAA7B,iBAA6CY,IAGvE,SAASE,EAAYC,GAA0B,IAAbH,EAAY,uDAAL,IACtCC,EAAc,gBACdG,EAAe,sCAKrB,OAAOf,EAAuB,GAAD,OAAIF,GAAJ,OAAec,GAAf,OAA6Bb,EAA7B,kBAA8Ce,EAA9C,iBAAkEH,GAAlE,OAAyEI,IAGnG,SAASC,EAAkBC,GAO9B,OAAOjB,EAAuB,GAAD,OAAIF,GAAJ,OANT,WAMS,OAA6BmB,GAA7B,OAAwClB,GAAxC,OALR,oBAQlB,SAASmB,EAAkBD,GAO9B,OAAOjB,EAAuB,GAAD,OAAIF,GAAJ,OANT,WAMS,OAA6BmB,EAA7B,mBAAgDlB,GAAhD,OALR,oBAQlB,SAAS3B,EAAkB6C,GAAuB,IAAbN,EAAY,uDAAL,IACzCC,EAAc,UACdG,EAAe,kBAKrB,OAAOf,EAAuB,GAAD,OAAIF,GAAJ,OAAec,GAAf,OAA6BK,EAA7B,mBAAgDlB,GAAhD,OAA0DgB,EAA1D,iBAA+EJ","sources":["webpack://goit-react-hw-05-movies/./src/components/MovieDetailsPage/Reviews/Reviews.module.css?1017","components/MovieDetailsPage/Reviews/Reviews.jsx","services/movies-api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"reviews\":\"Reviews_reviews__9mHxv\",\"reviews__item\":\"Reviews_reviews__item__bmptV\",\"author_info\":\"Reviews_author_info__v0pVN\",\"avatar\":\"Reviews_avatar__6p507\",\"author\":\"Reviews_author__Px04P\",\"date\":\"Reviews_date__T3i+G\",\"read_more_less__more\":\"Reviews_read_more_less__more__JJ4kV\",\"read_more_less__less\":\"Reviews_read_more_less__less__FCPYB\"};","import { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { fetchMovieReviews } from 'services/movies-api';\r\nimport ReactReadMoreReadLess from \"react-read-more-read-less\";\r\nimport s from './Reviews.module.css';\r\n\r\nexport default function Reviews() {\r\n    const { movieId } = useParams();\r\n    const [reviews, setReviews] = useState([]);\r\n\r\n    const options = {\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric',\r\n        hour: 'numeric',\r\n        minute: 'numeric',\r\n        second: 'numeric'\r\n    };\r\n\r\n    const test = <span class=\"iconify\" data-icon=\"icomoon-free:arrow-down2\"></span>;\r\n\r\n    useEffect(() => {\r\n        fetchMovieReviews(movieId)\r\n            .then(data => {\r\n                setReviews(data.results);\r\n            })\r\n    }, [movieId])\r\n\r\n    function avatarHandler(avatar) {\r\n        return avatar.includes(\"https\")\r\n            ? avatar.substring(1)\r\n            : `https://image.tmdb.org/t/p/w500${avatar}`\r\n    }\r\n\r\n    return <>\r\n        {reviews.length > 0\r\n            ? (<ul className={s.reviews}>\r\n                { reviews.map(({ id, author, content, author_details,created_at }) => (\r\n                    <li className={s.reviews__item} key={id}>\r\n                        <div className={s.author_info}>\r\n                            {author_details.avatar_path\r\n                                ? <img src={avatarHandler(author_details.avatar_path)} alt={author} className={s.avatar} />\r\n                                : <img src='https://upload.wikimedia.org/wikipedia/commons/6/65/No-Image-Placeholder.svg' alt={author} className={s.avatar} />\r\n                            }\r\n                            <div>\r\n                                <h4 className={s.author}>{author}</h4>\r\n                                <p className={s.date}>{new Date(created_at).toLocaleString(\"en-US\", options)}</p>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        <ReactReadMoreReadLess\r\n                            charLimit={300}\r\n                            readMoreText={\"Read more ▼\"}\r\n                            readLessText={\"Read less ▲\"}\r\n                            readMoreClassName={s.read_more_less__more}\r\n                            readLessClassName={s.read_more_less__less}\r\n                        >\r\n                            {content}\r\n                        </ReactReadMoreReadLess>\r\n                    </li>\r\n                ))}\r\n            </ul>)\r\n            : <p>We don't have any reviews for this movie</p>\r\n        }\r\n    </>\r\n}","const BASE_URL = 'https://api.themoviedb.org/3';\r\nconst API_KEY = '?api_key=387a2500e741e87c896db50117c25d75'\r\n\r\nasync function fetchWithErrorHandling(url = '', config = {}) {\r\n    const response = await fetch(url, config);\r\n    return response.ok\r\n        ? await response.json()\r\n        : Promise.reject(new Error('Not found'));\r\n}\r\n\r\nexport function fetchTrendingMovies(page=\"1\") {\r\n    const PATH_PARAMS = '/trending/movie/week';\r\n\r\n    // return fetch(`${BASE_URL}${PATH_PARAMS}${API_KEY}&page=${page}`)\r\n    //     .then(response => response.json())\r\n    \r\n    return fetchWithErrorHandling(`${BASE_URL}${PATH_PARAMS}${API_KEY}&page=${page}`)\r\n}\r\n\r\nexport function fetchMovies(searchQuery, page = \"1\") {\r\n    const PATH_PARAMS = '/search/movie';\r\n    const searchParams = '&language=en-US&include_adult=false';\r\n\r\n    // return fetch(`${BASE_URL}${PATH_PARAMS}${API_KEY}&query=${searchQuery}&page=${page}${searchParams}`)\r\n    //     .then(response => response.json())\r\n    \r\n    return fetchWithErrorHandling(`${BASE_URL}${PATH_PARAMS}${API_KEY}&query=${searchQuery}&page=${page}${searchParams}`)\r\n}\r\n\r\nexport function fetchMovieDetails(movie_id) {\r\n    const PATH_PARAMS = '/movie/';\r\n    const searchParams = '&language=en-US';\r\n\r\n    // return fetch(`${BASE_URL}${PATH_PARAMS}${movie_id}${API_KEY}${searchParams}`)\r\n    //     .then(response => response.json())\r\n    \r\n    return fetchWithErrorHandling(`${BASE_URL}${PATH_PARAMS}${movie_id}${API_KEY}${searchParams}`)\r\n}\r\n\r\nexport function fetchMovieCredits(movie_id) {\r\n    const PATH_PARAMS = '/movie/';\r\n    const searchParams = '&language=en-US';\r\n\r\n    // return fetch(`${BASE_URL}${PATH_PARAMS}${movie_id}/credits${API_KEY}${searchParams}`)\r\n    //     .then(response => response.json())\r\n    \r\n    return fetchWithErrorHandling(`${BASE_URL}${PATH_PARAMS}${movie_id}/credits${API_KEY}${searchParams}`)\r\n}\r\n\r\nexport function fetchMovieReviews(movie_id, page = \"1\") {\r\n    const PATH_PARAMS = '/movie/';\r\n    const searchParams = '&language=en-US';\r\n\r\n    // return fetch(`${BASE_URL}${PATH_PARAMS}${movie_id}/reviews${API_KEY}${searchParams}&page=${page}`)\r\n    //     .then(response => response.json())\r\n    \r\n    return fetchWithErrorHandling(`${BASE_URL}${PATH_PARAMS}${movie_id}/reviews${API_KEY}${searchParams}&page=${page}`)\r\n}"],"names":["Reviews","movieId","useParams","useState","reviews","setReviews","options","year","month","day","hour","minute","second","useEffect","fetchMovieReviews","then","data","results","length","className","s","map","avatar","id","author","content","author_details","created_at","avatar_path","src","includes","substring","alt","Date","toLocaleString","charLimit","readMoreText","readLessText","readMoreClassName","readLessClassName","BASE_URL","API_KEY","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","fetchTrendingMovies","page","PATH_PARAMS","fetchMovies","searchQuery","searchParams","fetchMovieDetails","movie_id","fetchMovieCredits"],"sourceRoot":""}